{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Text","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","iterateLeft","bind","assertThisInitialized","iterateRight","state","currentText","text","length","day","setState","react_default","a","createElement","Fragment","console","log","id","onClick","React","Component","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","loveLetters","document","getElementById"],"mappings":"oQAiCeA,qBA7Bb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,YAAcP,EAAKO,YAAYC,KAAjBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACnBA,EAAKU,aAAeV,EAAKU,aAAaF,KAAlBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACpBA,EAAKW,MAAQ,CACTC,YAAab,EAAMc,KAAKd,EAAMc,KAAKC,OAAS,GAC5CC,IAAKhB,EAAMc,KAAKC,QANLd,6EAUfG,KAAKa,SAAS,CAACJ,YAAaT,KAAKJ,MAAMc,KAAKV,KAAKQ,MAAMI,IAAM,GAAIA,IAAKZ,KAAKQ,MAAMI,IAAM,2CAGvFZ,KAAKa,SAAS,CAACJ,YAAaT,KAAKJ,MAAMc,KAAKV,KAAKQ,MAAMI,KAAMA,IAAKZ,KAAKQ,MAAMI,IAAM,qCAGnF,OACIE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACCC,QAAQC,IAAInB,KAAKQ,OAClBM,EAAAC,EAAAC,cAAA,KAAGI,GAAG,cAAN,IAAqBpB,KAAKQ,MAAMC,YAAhC,KACAK,EAAAC,EAAAC,cAAA,OAAKI,GAAG,eACPpB,KAAKQ,MAAMI,IAAM,EAAI,EAAIE,EAAAC,EAAAC,cAAA,UAAQI,GAAG,aAAaC,QAASrB,KAAKI,aAAtC,QAAmEU,EAAAC,EAAAC,cAAA,OAAKI,GAAG,eACpGpB,KAAKQ,MAAMI,IAAMZ,KAAKJ,MAAMc,KAAKC,OAASG,EAAAC,EAAAC,cAAA,UAAQI,GAAG,aAAaC,QAASrB,KAAKO,cAAtC,QAAoEO,EAAAC,EAAAC,cAAA,OAAKI,GAAG,wBAvB9GE,IAAMC,YCSVC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAtB,KAAA,UAAqBwB,KAAK,SAAAC,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,aCAdW,IAASC,OACPvB,EAAAC,EAAAC,cAACF,EAAAC,EAAMuB,WAAP,KACExB,EAAAC,EAAAC,cAACuB,EAAD,CAAK7B,KAAM8B,EAAY9B,QAEzB+B,SAASC,eAAe,SAM1BlB","file":"static/js/main.f0c4a028.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\n\nclass Text extends React.Component {\n  constructor(props) {\n      super(props);\n      this.iterateLeft = this.iterateLeft.bind(this);\n      this.iterateRight = this.iterateRight.bind(this);\n      this.state = {\n          currentText: props.text[props.text.length - 1],\n          day: props.text.length\n      }\n  }\n  iterateLeft() {\n      this.setState({currentText: this.props.text[this.state.day - 2], day: this.state.day - 1}) \n  }\n  iterateRight() {\n      this.setState({currentText: this.props.text[this.state.day], day: this.state.day + 1}) \n  }\n  render() {\n      return (\n          <>\n          {console.log(this.state)}\n          <p id=\"heart-text\">\"{this.state.currentText}\"</p>\n          <div id=\"loveButtons\">\n          {this.state.day - 1 > 0 ? <button id=\"prevButton\" onClick={this.iterateLeft}>Last</button> : <div id=\"nextButton\"/>}\n          {this.state.day < this.props.text.length ? <button id=\"nextButton\" onClick={this.iterateRight}>Next</button> : <div id=\"nextButton\"/>}\n          </div>\n          </>\n      )\n  }\n}\n\nexport default Text;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport loveLetters from './loveLetters.json';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App text={loveLetters.text}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}